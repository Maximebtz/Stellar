{% extends 'base.html.twig' %}

{% block title %}Stellar Accueil{% endblock %}

{% block body %}
<div class="wrapper">
    <div class="wrapper-home">
        <div id="grid" class="advert-card-list">
            {% for advert in adverts %}
                <div class="advert-card slide-in">
                    <a href="{{ path('detail_advert', {'id': advert.id})}}" class="clickable-card">
                        <figure>
                            {% if advert.images is not empty %}
                                <img src="{{ asset('uploads/' ~ advert.images[0].url) }}" alt="{{ advert.title }} image">
                            {% endif %}
                        </figure>
                        <div class="card-content">
                            <h3 class="card-title">{{ advert.title}}</h3>
                            <p class="card-text">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-geo-alt-fill" viewBox="0 0 16 16">
                                    <path d="M8 16s6-5.686 6-10A6 6 0 0 0 2 6c0 4.314 6 10 6 10zm0-7a3 3 0 1 1 0-6 3 3 0 0 1 0 6z"/>
                                </svg>
                                {{ advert.city }}, 
                                {{ advert.country }}
                            </p>
                            <p class="card-text">
                                <span class="price-card">{{ advert.price }}â‚¬</span>/nuit   
                            </p>
                        </div>
                    </a>
                </div>
                <script>
                    // Use the address from your Advert entity
                    var address = "{{ advert.address }}, {{ advert.city }}, {{ advert.country }}";

                    // Create a function to geocode the address using Google Maps Geocoding API
                    function geocodeAddress(address, callback) {
                        var geocoder = new google.maps.Geocoder();

                        geocoder.geocode({ 'address': address }, function(results, status) {
                            if (status === 'OK' && results.length > 0) {
                                var location = results[0].geometry.location;
                                var lat = location.lat();
                                var lng = location.lng();
                                callback([lat, lng]);
                            } else {
                                console.error('Geocoding failed for address: ' + address);
                            }
                        });
                    }

                    // Call the geocodeAddress function
                    geocodeAddress("{{ advert.address }}, {{ advert.city }}, {{ advert.country }}", function(coords) {
                        var lat = coords[0];
                        var lng = coords[1];

                        var marker = L.marker([lat, lng])
                            .bindPopup("<strong>{{ advert.title }}</strong><br>{{ advert.address }}, {{ advert.city }}, {{ advert.country }}");
                        map.addLayer(marker);
                    });
                </script>
            {% endfor %}
        </div>
        <div class="map">
            <div id="map"></div>
        </div>
    </div>
</div>
{% endblock %}
